apply plugin: "com.jfrog.bintray"

afterEvaluate {
    // needs afterEvaluate to load project description from module's build.gradle
    loadLocalBintrayProperties()

    bintray {
        // https://github.com/bintray/gradle-bintray-plugin
        user = readProperty('BINTRAY_USER')
        key = readProperty('BINTRAY_KEY')
        publications = ["MVFlowPublication"]
        pkg {
            repo = 'MVFlow'
            name = project.name
            assert project.description: "Missing description for project :${project.name} to be used for uploading to Bintray"
            desc = project.description
            licenses = ['MIT']
            websiteUrl = 'https://github.com/pedroql/mvflow'
            issueTrackerUrl = 'https://github.com/pedroql/mvflow/issues'
            vcsUrl = 'https://github.com/pedroql/mvflow.git'
            // the next line requires extra authentication
            // githubRepo = 'pedroql/mvflow'
            version {
                name = project.version
                released = new Date()
                vcsTag = readVcsTag()
            }
//            publish = true  //[Default: false]
//            dryRun = true   //[Default: false]
//            override = true //[Default: false] Whether to override version artifacts already published
        }
    }

}

static private def readProperty(propertyName) {
    return System.getProperty(propertyName) ?: System.getenv(propertyName)
}

private static def readVcsTag() {
    return System.getProperty("VCS_TAG")
}

private def loadLocalBintrayProperties() {
    Properties properties = new Properties()
    def propertiesFile = project.rootProject.file('local.properties')
    if (propertiesFile.exists()) {
        properties.load(propertiesFile.newDataInputStream())

        println("Loading Bintray properties into system")
        loadPropertyIntoSystem("BINTRAY_USER", properties)
        loadPropertyIntoSystem("BINTRAY_KEY", properties)
    }
}

private static void loadPropertyIntoSystem(String propertyName, Map properties) {
    def missingInSystem = !System.properties.containsKey(propertyName)
    def presentInLocalProperties = propertyName in properties
    if (missingInSystem && presentInLocalProperties) {
        System.setProperty(propertyName, properties[propertyName].toString())
    }
}
