name: Build and prepare release

# This workflow repeats all of the ci.yml... Should try to avoid that

on:
  push:
    tags:
      - 'v*'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Print webhook information
      run: 'cat ${{ github.event_path }}'
    - name: Extract pushed tag name
      id: parse_tag
      # outputs: tag NAME (v1.0.0) and tag VERSION (1.0.0)
      run: |
        echo ::set-output name=NAME::${GITHUB_REF#refs/tags/}
        echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/v}
    - name: Meta information
      run: 'echo Event ref: ${{ github.ref }} Tag name ${{ steps.parse_tag.outputs.NAME }} Commit hash: ${{ github.sha }}'
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build (Compile, lint, checkApi, test, etc)
      run: ./gradlew --no-daemon -DVERSION_OVERRIDE=${{ steps.parse_tag.outputs.VERSION }} build
    - name: Archive build reports artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build-reports
        path: '**/build/reports'
    - name: Ensure documentation is up to date
      id: doc-check
      run: |
        ./gradlew --no-daemon dokka
        # the next command will list documentation files out of date. Please run ./gradlew dokka
        git diff --exit-code --name-only || echo ::set-output name=status::failure
    - name: Check which documentation files have changed
      if: steps.doc-check.outputs.status == 'failure'
      run: git diff > git-diff.txt
    - name: Upload diff artifact of the documentation files
      uses: actions/upload-artifact@v2
      if: steps.doc-check.outputs.status == 'failure'
      with:
        name: git-diff
        path: git-diff.txt
    - name: Fail build due to documentation being out of date
      run: |
        rm git-diff.txt
        echo Documentation is out of date, you need to run ./gradlew dokka and try again. The following files have changed:
        git diff --exit-code --name-only


  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      # To use this repository's private action, you must check out the repository
      - name: Checkout
        uses: actions/checkout@v2
      - name: Extract pushed tag name
        id: parse_tag
        # outputs: tag NAME (v1.0.0) and tag VERSION (1.0.0)
        run: |
          echo ::set-output name=NAME::${GITHUB_REF#refs/tags/}
          echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/v}
      - name: Extract most recent tag
        id: extract_previous_release_tag
        run: |
          git fetch --tags
          echo ::set-output name=NAME::$(git tag --list 'v*' --sort=version:refname | grep  '^${{ steps.parse_tag.outputs.NAME }}$' --before-context=1 --after-context=0 | head -n 1)
      - name: Sanity check
        run: |
          git tag --list 'v*' --sort=version:refname
          echo break
          git tag --list 'v*' --sort=version:refname | grep  '^${{ steps.parse_tag.outputs.NAME }}$' --before-context=1 --after-context=0
          echo break break
          git tag --list 'v*' --sort=version:refname | grep  '^${{ steps.parse_tag.outputs.NAME }}$' --before-context=1 --after-context=0 | head -n 1
          echo final break
          echo ${{ steps.extract_previous_release_tag.outputs.NAME }}
      - name: Generate changelog
        # https://github.com/metcalfc/changelog-generator
        id: changelog
        uses: metcalfc/changelog-generator@v0.4.0
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
          base-ref: ${{ steps.extract_previous_release_tag.outputs.NAME }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.parse_tag.outputs.NAME }}
          release_name: ${{ steps.parse_tag.outputs.VERSION }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: true
          prerelease: "${{ contains( steps.parse_tag.outputs.VERSION, 'RC') ||  contains( steps.parse_tag.outputs.VERSION, 'SNAPSHOT') }}"
      - name: Debug my logic
        run: |
          echo Is prerelease? ${{ contains( steps.parse_tag.outputs.VERSION, 'RC') ||  contains( steps.parse_tag.outputs.VERSION, 'SNAPSHOT') }}
          echo Previous release tag name: ${{ steps.extract_previous_release_tag.NAME }}

  publish:
    name: Publish to Bintray
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - name: Extract pushed tag name
      id: parse_tag
      # outputs: tag NAME (v1.0.0) and tag VERSION (1.0.0)
      run: |
        echo ::set-output name=NAME::${GITHUB_REF#refs/tags/}
        echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/v}
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Upload to bintray
      env:
        VCS_TAG: ${{ steps.parse_tag.outputs.NAME }}
        BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
        BINTRAY_KEY: ${{ secrets.BINTRAY_KEY }}
      run: ./gradlew --no-daemon -DVERSION_OVERRIDE=${{  steps.parse_tag.outputs.VERSION }} bintrayUpload

